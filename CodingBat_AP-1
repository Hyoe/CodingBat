CodingBat.com

AP-1
—————

//scoresIncreasing
public boolean scoresIncreasing(int[] scores) {
  for (int i = 0; i < scores.length - 1; i++) {
    if (scores[i + 1] < scores[i]) {
      return false;
    }
  }
  return true;
}

—————

//scores100
public boolean scores100(int[] scores) {
  for (int i = 0; i < scores.length - 1; i++) {
    if (scores[i] == 100 && scores[i + 1] == 100) {
      return true;
    }
  }
  return false;
}

—————

//scoresClump
public boolean scoresClump(int[] scores) {
  for (int i = 0; i < scores.length - 2; i++) {
    if (scores[i + 1] - scores[i] <= 2 && scores[i + 2] - scores[i] <= 2) {
      return true;
    }
  }
  return false;
}

—————

//scoresAverage
public int scoresAverage(int[] scores) {
  
  int start = 0;
  int end = scores.length;
  int mid = scores.length / 2;
  
  int firstHalfAvg = average(scores, start, mid);
  int secondHalfAvg = average(scores, mid, end);
  
  if (firstHalfAvg > secondHalfAvg) {
    return firstHalfAvg;
  }
  else {
    return secondHalfAvg;
  }
  
}

public int average(int[] scores, int start, int end) {
  int sum = 0;
  int avg = 0;
  int arrayLength = end - start;
  for (int i = start; i < end; i++) {
    sum += scores[i];
  }
  avg = sum / arrayLength;
  return avg;
}

—————

//wordsCount
public int wordsCount(String[] words, int len) {
  
  int count = 0;
  
  for (int i = 0; i < words.length; i++) {
    int wordLength = words[i].length();
    if (wordLength == len) {
      count++;
    }
  }
  return count;
}

—————

//wordsFront
public String[] wordsFront(String[] words, int n) {
  String[] newArray = new String[n];
  for (int i = 0; i <= n - 1; i++) {
    newArray[i] = words[i];
  }
  return newArray;
}

—————

//wordsWithoutList
public List wordsWithoutList(String[] words, int len) {
  ArrayList<String> newList = new ArrayList<String>();
  
  for (int i = 0; i < words.length; i++) {
    if (words[i].length() != len) {
      newList.add(words[i]);
    }
  }
  return newList;
}

——————

//hasOne
public boolean hasOne(int n) {
  while (n > 0) {
    if (n % 10 == 1) {
      return true;
    }
    else {
      n = n / 10;
    }
  }
  return false;
}

—————

//dividesSelf
public boolean dividesSelf(int n) {
  int originalN = n;
  while (n > 0) {
    if (n % 10 == 0) {
      return false;
    }
    else if (originalN % (n % 10) == 0) {
      n = n / 10;
    }
    else {
      return false;
    }
  }
  return true;
}

—————

//copyEvens
public int[] copyEvens(int[] nums, int count) {
  int[] newArray = new int[count];
  int indexOfNums = 0;
  
  for (int i = 0; i < nums.length; i++) {
    if (nums[i] % 2 == 0) {
      newArray[indexOfNums] = nums[i];
      indexOfNums++;
    }
    if (indexOfNums == count) {
      break;
    }
  }
  return newArray;
}

————

//copyEndy
public int[] copyEndy(int[] nums, int count) {
  int[] newArray = new int[count];
  int indexOfNums = 0;
  
  for (int i = 0; i < nums.length; i++) {
    if (isEndy(nums[i])) {
      newArray[indexOfNums] = nums[i];
      indexOfNums++;
    }
    if (indexOfNums == count) {
      break;
    }
  }
  return newArray;
}

public boolean isEndy(int n) {
  if ((n >= 0  && n <=10) || (n >= 90 && n <= 100)) {
    return true;
  }
  return false;
}

————

//matchUp
public int matchUp(String[] a, String[] b) {
  int count = 0;
  
  for (int i = 0; i < a.length; i++) {
    if (!a[i].equals("") && !b[i].equals("") && a[i].charAt(0) == b[i].charAt(0)) {
      count++;
    }
  }
  return count;
}

————

//scoreUp
public int scoreUp(String[] key, String[] answers) {
  int score = 0;
  
  for (int i = 0; i < key.length; i++) {
    if (key[i] == answers[i]) {
      score += 4;
    }
    else if (answers[i] == "?") {
      score += 0;
    }
    else {
      score -= 1;
    }
  }
  return score;
}

—————

//wordsWithout
public String[] wordsWithout(String[] words, String target) {
  int count = 0;
  int newArrayIndex = 0;
  
  for (int i = 0; i < words.length; i++) {
    if (words[i].equals(target)) {
      count++;
    }
  }
  
  String[] newArray = new String[words.length - count];
  
  for (int i = 0; i < words.length; i++) {
    if (!words[i].equals(target)) {
      newArray[newArrayIndex] = words[i];
      newArrayIndex++;
    }
  }
  return newArray;
}

—————

//scoresSpecial
public int scoresSpecial(int[] a, int[] b) {
  int sum = 0;
  sum = largestSpecialScore(a) + largestSpecialScore(b);
  return sum;
}

public int largestSpecialScore(int[] newArray) {
  int largest = 0;

  for (int i = 0; i < newArray.length; i++) {
    if (newArray[i] % 10 == 0 && newArray[i] > largest) {
      largest = newArray[i];
    }
  }
  return largest;
}

—————

//sumHeights
public int sumHeights(int[] heights, int start, int end) {
  int sum = 0;
  
  for (int i = start; i < end; i++) {
    sum += Math.abs(heights[i] - heights[i + 1]);
  }
  return sum;
}

—————

//sumHeights2
public int sumHeights2(int[] heights, int start, int end) {
  int sum = 0;
  
  for (int i = start; i < end; i++) {
    if (heights[i] < heights[i + 1]) {
      sum += (2 * Math.abs(heights[i] - heights[i + 1]));
    }
    else {
      sum += Math.abs(heights[i] - heights[i + 1]);
    }
  }
  return sum;
}

—————

//bigHeights
public int bigHeights(int[] heights, int start, int end) {
  int sum = 0;
  
  for (int i = start; i < end; i++) {
    if ((Math.abs(heights[i] - heights[i + 1])) >= 5) {
      sum++;
    }
  }
  return sum;
}

—————

//userCompare
public int userCompare(String aName, int aId, String bName, int bId) {
  if (aName.compareTo(bName) > 0) {
    return 1;
  }
  else if (aName.equals(bName)) {
    if (aId > bId) {
      return 1;
    }
    else if (aId < bId) {
      return -1;
    }
    else {
      return 0;
    }
  }
  return -1;
}

—————

//mergeTwo
public String[] mergeTwo(String[] a, String[] b, int n) {
  String[] newArray = new String[n];
  int indexOfNewArray = 0;
  int indexOfArrayA = 0;
  int indexOfArrayB = 0;
  
  while (indexOfNewArray < n) {
    if (a[indexOfArrayA].compareTo(b[indexOfArrayB]) < 0) {
      newArray[indexOfNewArray++] = a[indexOfArrayA++];
    }
    else if (a[indexOfArrayA].compareTo(b[indexOfArrayB]) > 0) {
      newArray[indexOfNewArray++] = b[indexOfArrayB++];
    }
    else {
      newArray[indexOfNewArray++] = b[indexOfArrayB++];
      indexOfArrayA++;
    }
  }
  return newArray;
}

—————

//commonTwo
public int commonTwo(String[] a, String[] b) {
  int count = 0;
  String updatedString = "";
  
  for (int i = 0; i < b.length; i++) {
    for (int j = 0; j < a.length; j++) {
      if (a[j].compareTo(b[i]) == 0 && !updatedString.contains(a[j])) {
        updatedString += a[j];
        count++;
      }
    }
  }
  return count;
}


——————————————————————————


String-2
—————————

//doubleChar
public String doubleChar(String str) {
  String newString = "";
  
  for (int i = 0; i < str.length(); i++) {
    newString = newString + str.charAt(i) + str.charAt(i);
  }
  return newString;
}

—————

//countHi
public int countHi(String str) {
  int count = 0;
  
  for (int i = 0; i < str.length() - 1; i++) {
    if (str.charAt(i) == 'h' && str.charAt(i + 1) == 'i') {
      count++;
    }
  }
  return count;
}

—————

//catDog
public boolean catDog(String str) {
  int countCat = 0;
  int countDog = 0;
  
  for (int i = 0; i < str.length() - 2; i++) {
    if (str.substring(i, i + 3).equals("cat")) {
      countCat++;
    }
    if (str.substring(i, i + 3).equals("dog")) {
      countDog++;
    }
  }
  return countCat == countDog;
}

—————

//countCode
public int countCode(String str) {
  int count = 0;
  
  for (int i = 0; i < str.length() - 3; i++) {
    if (str.charAt(i) == 'c' && str.charAt(i + 1) == 'o' && str.charAt(i + 3) == 'e') {
      count++;
    }
  }
  return count;
}

—————

//endOther
public boolean endOther(String a, String b) {
  String aLowerCase = a.toLowerCase();
  String bLowerCase = b.toLowerCase();
  
  int aLength = a.length();
  int bLength = b.length();
  
  if (aLength < bLength) {
    String tempString = bLowerCase.substring(bLength - aLength, bLength);
    if (tempString.equals(aLowerCase)) {
      return true;
    }
    else {
      return false;
    }
  }
  else {
    String tempString = aLowerCase.substring(aLength - bLength, aLength);
    if (tempString.equals(bLowerCase)) {
      return true;
    }
    else {
      return false;
    }
  }
}

—————

//xyzThere
public boolean xyzThere(String str) {
  boolean result = false;
  
  if (str.length() >= 3 && str.substring(0, 3).equals("xyz")) {
    result = true;
  }
      
  for (int i = 0; i < str.length() - 3; i++) {
    if (str.charAt(i) != '.' && str.substring(i + 1, i + 4).equals("xyz")) {
      return true;
    }
  }
  return result;
}

—————

//bobThere
public boolean bobThere(String str) {
  boolean result = false;
  
  if (str.length() >= 3 && str.charAt(0) == 'b' && str.charAt(2) == 'b') {
    result = true;
  }
  
  for (int i = 0; i < str.length() - 2; i++) {
    if (str.charAt(i) == 'b' && str.charAt(i + 2) == 'b') {
      result = true;
    }
  }
  return result;
}

—————

//xyBalance
public boolean xyBalance(String str) {
  boolean xChar = false;
  boolean yChar = false;
  
  for (int i = 0; i < str.length(); i++) {
    if (str.charAt(i) == 'x' && yChar == true) {
      xChar = true;
      yChar = false;
    }
    else if (str.charAt(i) == 'x') {
      xChar = true;
    }
    if (str.charAt(i) == 'y' && xChar == true) {
      yChar = true;
    }
  }
  if (xChar == false) {
    yChar = true;
  }
  return yChar;
}

—————

//mixString
public String mixString(String a, String b) {
  String newString = "";
  int maxLength = 0;
  
  if (a.length() > b.length()) {
    maxLength = a.length();
  }
  else {
    maxLength = b.length();
  }
  
  for (int i = 0; i < maxLength; i++) {
    if (i <= a.length() - 1) {
      newString += a.substring(i, i + 1);
    }
    if (i <= b.length() - 1) {
      newString += b.substring(i, i + 1);
    }
  }
  return newString;
}

—————

//repeatEnd
public String repeatEnd(String str, int n) {
  String newString = "";
  
  for (int i = 0; i < n; i++) {
    newString += str.substring(str.length() - n, str.length());
  }
  return newString;
}

—————

//repeatFront
public String repeatFront(String str, int n) {
  String newString = "";

  for (int i = n; i > 0; i--) {
    newString += str.substring(0, i);
  }
  return newString;
}

—————

//repeatSeparator
public String repeatSeparator(String word, String sep, int count) {
  String newString = "";
  
  for (int i = 0; i < count; i++) {
    if (i < count - 1) {
      newString += word + sep;
    }
    else {
      newString += word;
    }
  }
  return newString;
}

—————

//prefixAgain
public boolean prefixAgain(String str, int n) {
  boolean result = false;
  String prefixString = str.substring(0, n);
  
  for (int i = n; i <= str.length() - prefixString.length(); i++) {
    if (prefixString.equals(str.substring(i, i + prefixString.length()))) {
      result = true;
    }
  }
  return result;
}

—————

//xyzMiddle
public boolean xyzMiddle(String str) {
  int strLength = str.length();
  int middle = strLength / 2;
  
  if (strLength < 3) {
    return false;
  }
  
  if (strLength % 2 != 0) {
    if (str.substring(middle - 1, middle + 2).equals("xyz")) {
      return true;
    }
    else {
      return false;
    }
  }
  else if (str.substring(middle - 1, middle + 2).equals("xyz") ||
    str.substring(middle - 2, middle + 1).equals("xyz")) {
    return true;
  }
  else {
    return false;
  }
}

—————

//getSandwich
public String getSandwich(String str) {
  String newString = "";
  String tempString = "";
  
  int beginOfMiddleString = 0;
  int endOfMiddleString = 0;
  
  boolean middleString = false;
  
  if (str.length() <= 10) {
      return newString;
  }
  
  for (int i = 0; i < str.length() - 4; i++) {
    tempString = str.substring(i, i + 5);
    
    if (tempString.equals("bread") && middleString == false) {
      beginOfMiddleString = i + 5;
      middleString = true;
    }
    
    if (tempString.equals("bread") && middleString == true) {
      endOfMiddleString = i;
    }
    
  }
  newString = str.substring(beginOfMiddleString, endOfMiddleString);
  return newString;
}

—————

//sameStarChar
public boolean sameStarChar(String str) {
  boolean result = true;
  
  for (int i = 1; i < str.length() - 1; i++) {
    if (str.charAt(i) == '*') {
      if  (str.charAt(i - 1) != str.charAt(i + 1)) {
        result = false;
      }
    }
  }
  return result;
}

//oneTwo
public String oneTwo(String str) {
  String newString = "";
  
  for (int i = 0; i < str.length() - 2; i++) {
    if (str.length() > 2 && i == 0 || i % 3 == 0) {
      newString += str.substring(i + 1, i + 3) + str.substring(i, i + 1);
    }
  }
  return newString;
}

—————

//zipZap
public String zipZap(String str) {
  String newString = str;
  
  for (int i = 0; i < newString.length() - 2; i++) {
    if (newString.charAt(i) == 'z' && newString.charAt(i + 2) == 'p') {
      newString = newString.substring(0, i + 1) + newString.substring(i + 2); 
    }
  }
  return newString;
}

—————

//starOut
public String starOut(String str) {
  String newString = "";
  
  for (int i = 0; i < str.length(); i++) {
    if (i == 0 && str.charAt(i) != '*') {
      newString += str.charAt(i);
    }
    if (i > 0 && str.charAt(i) != '*' && str.charAt(i - 1) != '*') {
      newString += str.charAt(i);
    }
    if (i > 0 && str.charAt(i) == '*' && str.charAt(i - 1) != '*') {
      newString = newString.substring(0, newString.length() - 1);
    }
  }
  return newString;
}

—————

//plusOut
public String plusOut(String str, String word) {
  String newString = "";
  int wordLength = word.length();

  for (int i = 0; i < str.length(); i++) {
    if (i <= str.length() - wordLength) {
      if (str.substring(i, i + wordLength).equals(word)) {
        newString += word;
        i += wordLength - 1;
      }
      else {
        newString += "+";
      }
    }
    else {
      newString += "+";
    }
  }
  return newString;
}

—————

//wordEnds
public String wordEnds(String str, String word) {
  String newString = "";
  String tempString = "";
  
  for (int i = 0; i < str.length() - word.length() + 1; i++) {
    tempString = str.substring(i, i + word.length());
    if (i > 0 && tempString.equals(word)) {
      newString += str.substring(i - 1, i);
    }
    if (i < str.length() - word.length() && tempString.equals(word)) {
      newString += str.substring(i + word.length(), i + word.length() + 1);
    }
  }
  return newString;
}

——————————————————————

Recursion-1
———————————

//factorial
public int factorial(int n) {
  if (n == 0) {
    return 1;
  }
  else {
    return n * factorial(n - 1);
  }
}

—————

//bunnyEars
public int bunnyEars(int bunnies) {
  if (bunnies == 0) {
    return 0;
  }
  else {
    return 2 + bunnyEars(bunnies - 1);
  }
}

—————

//fibonacci
public int fibonacci(int n) {
  if (n == 0) {
    return 0;
  }
  else if (n == 1) {
    return 1;
  }
  else {
    return fibonacci(n - 2) + fibonacci(n - 1);
  }
}

—————

//bunnyEars2
public int bunnyEars2(int bunnies) {
  if (bunnies == 0) {
    return 0;
  }
  else if (bunnies % 2 == 0) {
    return 3 + bunnyEars2(bunnies - 1);
  }
  else {
    return 2 + bunnyEars2(bunnies - 1);
  }
}

—————

//triangle
public int triangle(int rows) {
  if (rows == 0) {
    return 0;
  }
  else {
    return rows + triangle(rows - 1);
  }
}

—————

//sumDigits
public int sumDigits(int n) {
  if (n == 0) {
    return 0;
  }
  else {
    return (n % 10) + sumDigits(n / 10);
  }
}

—————

//count7
public int count7(int n) {
  if (n == 0) {
    return 0;
  }
  if (n % 10 == 7) {
    return 1 + count7(n / 10);
  }
  else {
    return count7(n / 10);
  }
}

—————

//count8
public int count8(int n) {
  if (n == 0) {
    return 0;
  }
  if (n % 10 == 8 && (n / 10) % 10 == 8) {
    return 2 + count8(n / 10);
  }
  else if (n % 10 == 8) {
    return 1 + count8(n / 10);
  }
  else {
    return count8(n / 10);
  }
}

—————

//powerN
public int powerN(int base, int n) {
  if (n == 0) {
    return 1;
  }
  else {
    return base * powerN(base, n - 1);
  }
}

—————

//countX
public int countX(String str) {
  if (str.length() == 0) {
    return 0;
  }
  if (str.charAt(0) == 'x') {
    return 1 + countX(str.substring(1));
  }
  else {
    return countX(str.substring(1));
  }
}

————-

//countHi
public int countHi(String str) {
  if (str.length() < 2) {
    return 0;
  }
  if (str.substring(0, 2).equals("hi")) {
    return 1 + countHi(str.substring(1));
  }
  else {
    return countHi(str.substring(1));
  }
}

—————

//changeXY
public String changeXY(String str) {
  if (str.length() == 0) {
    return str;
  }
  if (str.charAt(0) == 'x') {
    return "y" + changeXY(str.substring(1));
  }
  else {
    return str.charAt(0) + changeXY(str.substring(1));
  }
}

—————

changePi
public String changePi(String str) {
  if (str.length() < 2) {
    return str;
  }
  if (str.substring(0, 2).equals("pi")) {
    return "3.14" + changePi(str.substring(2));
  }
  else {
    return str.charAt(0) + changePi(str.substring(1));
  }
}

—————

//noX
public String noX(String str) {
  if (str.length() < 1) {
    return str;
  }
  if (str.charAt(0) == 'x') {
    return noX(str.substring(1));
  }
  else {
    return str.charAt(0) + noX(str.substring(1));
  }
}

—————

//array6
public boolean array6(int[] nums, int index) {
  if (index >= nums.length) {
    return false;
  }
  if (nums[index] == 6) {
    return true;
  }
  else {
    return array6(nums, index + 1);
  }
}

—————

//array11
public int array11(int[] nums, int index) {
  if (index >= nums.length) {
    return 0;
  }
  if (nums[index] == 11) {
    return 1 + array11(nums, index + 1);
  }
  else {
    return array11(nums, index + 1);
  }
}

—————

//array220
public boolean array220(int[] nums, int index) {
  if (index >= nums.length - 1) {
    return false;
  }
  if (nums[index + 1] == 10 * nums[index]) {
    return true;
  }
  else {
    return array220(nums, index + 1);
  }
}

—————

//allStar
public String allStar(String str) {
  if (str.length() <= 1) {
    return str;
  }
  else {
    return str.charAt(0) + "*" + allStar(str.substring(1));
  }
}

—————

//pairStar
public String pairStar(String str) {
  if (str.length() < 2) {
    return str;
  }
  if (str.charAt(0) == str.charAt(1)) {
    return str.charAt(0) + "*" + pairStar(str.substring(1));
  }
  else {
    return str.charAt(0) + pairStar(str.substring(1));
  }
}

——————

//endX
public String endX(String str) {
  if (str.length() < 1) {
    return str;
  }
  if (str.charAt(0) == 'x') {
    return endX(str.substring(1)) + "x";
  }
  else {
    return str.charAt(0) + endX(str.substring(1));
  }
}

——————

//countPairs
public int countPairs(String str) {
  if (str.length() < 3) {
    return 0;
  }
  if (str.charAt(0) == str.charAt(2)) {
    return 1 + countPairs(str.substring(1));
  }
  else {
    return countPairs(str.substring(1));
  }
}

——————

//countAbc
public int countAbc(String str) {
  if (str.length() < 3) {
    return 0;
  }
  if (str.substring(0, 3).equals("abc") || str.substring(0, 3).equals("aba")) {
    return 1 + countAbc(str.substring(1));
  }
  else {
    return countAbc(str.substring(1));
  }
}

——————

//count11
public int count11(String str) {
  if (str.length() < 2) {
    return 0;
  }
  if (str.substring(0, 2).equals("11")) {
    return 1 + count11(str.substring(2));
  }
  else {
    return count11(str.substring(1));
  }
}

——————

//stringClean
public String stringClean(String str) {
  if (str.length() < 2) {
    return str;
  }
  if (str.charAt(0) == str.charAt(1)) {
    return stringClean(str.substring(1));
  }
  else {
    return str.charAt(0) + stringClean(str.substring(1));
  }
}

——————

//countHi2
public int countHi2(String str) {
  if (str.length() < 2) {
    return 0;
  }
  if (str.charAt(0) == 'x' && str.length() >= 3) {
    if (str.substring(1, 3).equals("hi")) {
      return countHi2(str.substring(3));
    }
  }
  if (str.substring(0, 2).equals("hi")) {
    return 1 + countHi2(str.substring(2));
  }
  else {
    return countHi2(str.substring(1));
  }
}

——————

//parentBit
public String parenBit(String str) {
  if (str.length() < 1) {
    return str;
  }
  if (str.charAt(0) == '(') {
    if (str.charAt(str.length() - 1) == ')') {
      return str;
    }
    else {
      return parenBit(str.substring(0, str.length() - 1));
    }
  }
  else {
    return parenBit(str.substring(1));
  }
}

——————

//nestParen
public boolean nestParen(String str) {
  if (str.length() < 1) {
    return true;
  }
  if (str.charAt(0) == '(' && str.charAt(str.length() - 1) == ')') {
    return nestParen(str.substring(1, str.length() - 1));
  }
  else {
    return false;
  }
}

——————

//strCount
public int strCount(String str, String sub) {
  if (str.length() < sub.length()) {
    return 0;
  }
  if (str.substring(0, sub.length()).equals(sub)) {
    return 1 + strCount(str.substring(sub.length()), sub);
  }
  else {
    return strCount(str.substring(1), sub);
  }
}

——————

//strCopies
public boolean strCopies(String str, String sub, int n) {
  if (n == 0) {
    return true;
  }
  if (str.length() < sub.length()) {
    return false;
  }
  if (str.substring(0, sub.length()).equals(sub)) {
    return strCopies(str.substring(1), sub, n - 1);
  }
  else {
    return strCopies(str.substring(1), sub, n); 
  }
}

——————

//strDist
public int strDist(String str, String sub) {
  if (str.length() == sub.length() && str.equals(sub)) {
    return str.length();
  }
  else if (str.length() < sub.length()) {
    return 0;
  }
  else if (str.substring(0, sub.length()).equals(sub)) {
    if (str.length() > sub.length() && str.substring(str.length() - sub.length(),
      str.length()).equals(sub)) {
        return str.length();
    }
    else {
      return strDist(str.substring(0, str.length() - 1), sub);
    }
  }
  return strDist(str.substring(1), sub);
}




























